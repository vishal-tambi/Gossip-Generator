"use client"

import type React from "react"

import { useState, useEffect } from "react"
import { v4 as uuidv4 } from "uuid"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent } from "@/components/ui/card"
import { Loader2, Share2, BookmarkPlus } from "lucide-react"
import { generateGossip, generateImage, checkApiKeyStatus } from "@/app/actions"
import { GossipStory } from "@/components/gossip-story"
import { CategorySelector } from "@/components/category-selector"
import { ThemeSelector } from "@/components/theme-selector"
import { ApiStatus } from "@/components/api-status"
import { useGossip } from "@/context/gossip-context"
import { useToast } from "@/hooks/use-toast"
import { formatDate } from "@/lib/utils"

interface GossipContent {
  headline: string
  summary: string
  content: string
  imagePrompt: string
}

export function GossipGenerator() {
  const [celebrity, setCelebrity] = useState("")
  const [category, setCategory] = useState<string>("career")
  const [gossip, setGossip] = useState<GossipContent | null>(null)
  const [imageUrl, setImageUrl] = useState<string | null>(null)
  const [isGenerating, setIsGenerating] = useState(false)
  const [isGeneratingImage, setIsGeneratingImage] = useState(false)
  const [error, setError] = useState("")
  const [apiKeyValid, setApiKeyValid] = useState<boolean | null>(null)
  const [isCheckingApiKey, setIsCheckingApiKey] = useState(false)
  const [storyDate, setStoryDate] = useState<string>("")

  const { theme, addFavorite } = useGossip()
  const { toast } = useToast()

  // Check API key status on component mount only
  useEffect(() => {
    let isMounted = true

    const validateApiKey = async () => {
      if (isCheckingApiKey) return

      setIsCheckingApiKey(true)
      try {
        const status = await checkApiKeyStatus()
        if (isMounted) {
          setApiKeyValid(status.isValid)
          if (!status.isValid) {
            setError(status.message)
          }
        }
      } catch (err) {
        if (isMounted) {
          setApiKeyValid(false)
          setError("Failed to validate API key. Please check your environment variables.")
        }
      } finally {
        if (isMounted) {
          setIsCheckingApiKey(false)
        }
      }
    }

    validateApiKey()

    return () => {
      isMounted = false
    }
  }, [])

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!celebrity.trim()) return

    // Validate API key before proceeding
    if (apiKeyValid === false) {
      toast({
        title: "API Key Error",
        description: "The Google Gemini API key is invalid or not configured. Please check your environment variables.",
        variant: "destructive",
      })
      return
    }

    setIsGenerating(true)
    setError("")
    setGossip(null)
    setImageUrl(null)
    setStoryDate(formatDate(new Date()))

    try {
      const result = await generateGossip(celebrity, category)
      setGossip(result)

      // Generate image after gossip is generated
      setIsGeneratingImage(true)
      try {
        const imgUrl = await generateImage(result.imagePrompt)
        setImageUrl(imgUrl)
      } catch (imgErr) {
        console.error("Image generation failed:", imgErr)
        toast({
          title: "Image Generation Failed",
          description:
            imgErr instanceof Error ? imgErr.message : "Could not generate an image, but your gossip is ready!",
          variant: "destructive",
        })
      } finally {
        setIsGeneratingImage(false)
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : "Failed to generate gossip. Please try again.")
      console.error(err)
    } finally {
      setIsGenerating(false)
    }
  }

  const handleSaveToFavorites = () => {
    if (!gossip) return

    const savedGossip = {
      id: uuidv4(),
      celebrity,
      category,
      headline: gossip.headline,
      summary: gossip.summary,
      content: gossip.content,
      imagePrompt: gossip.imagePrompt,
      imageUrl: imageUrl || undefined,
      timestamp: Date.now(),
      theme,
    }

    addFavorite(savedGossip)
    toast({
      title: "Saved to Favorites",
      description: "This gossip story has been saved to your favorites!",
    })
  }

  const handleShare = async () => {
    if (!gossip) return

    try {
      if (navigator.share) {
        await navigator.share({
          title: gossip.headline,
          text: `${gossip.headline}\n\n${gossip.content}\n\nGenerated by Celebrity Gossip Generator`,
          url: window.location.href,
        })
      } else {
        await navigator.clipboard.writeText(
          `${gossip.headline}\n\n${gossip.content}\n\nGenerated by Celebrity Gossip Generator`,
        )
        toast({
          title: "Copied to clipboard!",
          description: "The gossip story has been copied to your clipboard.",
        })
      }
    } catch (err) {
      console.error("Error sharing:", err)
    }
  }

  return (
    <div className="space-y-8">
      {/* API Status Card */}
      <ApiStatus />

      {/* Generator Form */}
      <Card className="bg-black">
        <CardContent className="pt-6">
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="space-y-2">
              <label htmlFor="celebrity" className="block text-sm font-medium text-black-700">
                Enter a celebrity name:
              </label>
              <Input
                id="celebrity"
                value={celebrity}
                onChange={(e) => setCelebrity(e.target.value)}
                placeholder="e.g., Taylor Swift, Tom Cruise, BeyoncÃ©"
                className="w-full"
                disabled={isGenerating || apiKeyValid === false}
              />
            </div>

            <CategorySelector selectedCategory={category} onChange={setCategory} />

            <div className="flex flex-col sm:flex-row justify-between gap-4">
              <Button
                type="submit"
                className="w-full sm:w-auto bg-pink-600 hover:bg-pink-700"
                disabled={isGenerating || !celebrity.trim() || apiKeyValid === false}
              >
                {isGenerating ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Generating Gossip...
                  </>
                ) : (
                  "Generate Gossip!"
                )}
              </Button>

              <ThemeSelector />
            </div>
          </form>
        </CardContent>
      </Card>

      {/* Error Display */}
      {error && (
        <div className="p-4 text-red-600 bg-red-50 rounded-md border border-red-200">
          <h3 className="font-medium mb-1">Error</h3>
          <p>{error}</p>
          {error.includes("API key") && (
            <div className="mt-2 text-sm">
              <p>To fix this issue:</p>
              <ol className="list-decimal pl-5 mt-1 space-y-1">
                <li>Create a .env.local file in your project root</li>
                <li>Add your Google Gemini API key: GOOGLE_AI_API_KEY=your_api_key_here</li>
                <li>Restart your application</li>
              </ol>
            </div>
          )}
        </div>
      )}

      {/* Gossip Story Display */}
      {gossip && (
        <div className="space-y-4">
          <GossipStory
            gossip={gossip}
            celebrity={celebrity}
            imageUrl={imageUrl}
            isGeneratingImage={isGeneratingImage}
            theme={theme}
            date={storyDate}
          />

          <div className="flex justify-center gap-4">
            <Button onClick={handleSaveToFavorites} variant="outline" className="flex items-center gap-2">
              <BookmarkPlus className="h-4 w-4" />
              Save to Favorites
            </Button>

            <Button onClick={handleShare} variant="outline" className="flex items-center gap-2">
              <Share2 className="h-4 w-4" />
              Share This Gossip
            </Button>
          </div>
        </div>
      )}
    </div>
  )
}

